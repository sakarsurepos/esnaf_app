import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { Database } from '../types/supabase';

// Mock veri modu kontrolÃ¼
const USE_MOCK_DATA = process.env.USE_MOCK_DATA === 'true';
const IS_DEV = process.env.NODE_ENV === 'development';

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_ANON_KEY || '';

let supabase: SupabaseClient<Database>;

// Mock veri modunda boÅŸ deÄŸerlerle bile Ã§alÄ±ÅŸabilecek bir istemci oluÅŸtur
// veya gerÃ§ek baÄŸlantÄ± bilgileriyle bir istemci oluÅŸtur
try {
  if (IS_DEV && USE_MOCK_DATA) {
    console.log('ğŸ§ª Mock veri modu: Supabase minimalist istemci oluÅŸturuluyor');
    // Mock veri modunda minimum dÃ¼zeyde bir istemci oluÅŸtur
    // Bu istemci hiÃ§bir API Ã§aÄŸrÄ±sÄ± yapmayacak ama referans olarak kullanÄ±labilecek
    supabase = createClient<Database>(
      'https://placeholder-url.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mock-key'
    );
  } else {
    // Normal modda gerÃ§ek baÄŸlantÄ± bilgileriyle istemci oluÅŸtur
    console.log('ğŸ”Œ GerÃ§ek Supabase baÄŸlantÄ±sÄ± kurulmaya Ã§alÄ±ÅŸÄ±lÄ±yor');
    supabase = createClient<Database>(supabaseUrl, supabaseKey);
  }
} catch (error) {
  console.error('Supabase istemcisi oluÅŸturulurken hata:', error);
  // Hata durumunda da Ã§alÄ±ÅŸabilmesi iÃ§in boÅŸ bir istemci oluÅŸtur
  supabase = createClient<Database>(
    'https://placeholder-url.supabase.co',
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mock-key'
  );
}

// Veri sorgulama iÅŸlemleri iÃ§in yardÄ±mcÄ± fonksiyonlar

/**
 * KullanÄ±cÄ± bilgilerini getirir
 * @param userId KullanÄ±cÄ± ID'si
 */
export const getUser = async (userId: string) => {
  return await supabase
    .from('users')
    .select('*')
    .eq('id', userId)
    .single();
};

/**
 * Ä°ÅŸletme bilgilerini getirir
 * @param businessId Ä°ÅŸletme ID'si
 */
export const getBusiness = async (businessId: string) => {
  return await supabase
    .from('businesses')
    .select('*')
    .eq('id', businessId)
    .single();
};

/**
 * Hizmet bilgilerini getirir
 * @param serviceId Hizmet ID'si
 */
export const getService = async (serviceId: string) => {
  return await supabase
    .from('services')
    .select('*')
    .eq('id', serviceId)
    .single();
};

/**
 * Randevu bilgilerini getirir
 * @param appointmentId Randevu ID'si
 */
export const getAppointment = async (appointmentId: string) => {
  return await supabase
    .from('appointments')
    .select('*')
    .eq('id', appointmentId)
    .single();
};

export default supabase; 